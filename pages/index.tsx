import Head from "next/head";

import { CanvasClient } from "@uniformdev/canvas";
import { Composition, Slot } from "@uniformdev/canvas-react";

type GenericObject = {
  [key: string]: any;
};

export default function Home({ composition }: GenericObject) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {/* <pre>{JSON.stringify(composition, null, 2)}</pre> */}

        <Composition
          data={composition}
          resolveRenderer={({ type }) => {
            const CTA = ({
              title,
              subtitle,
              linkURL,
              linkTitle,
            }: GenericObject) => {
              return (
                <div>
                  <h2>{title}</h2>
                  <h3>{subtitle}</h3>

                  <a href={linkURL}>{linkTitle}</a>
                </div>
              );
            };

            const CustomizationWindow = ({
              title,
              framework,
            }: GenericObject) => {
              return (
                <div>
                  <hr />
                  <h2>{title}</h2>
                  <span>{framework}</span>
                  <hr />
                </div>
              );
            };

            switch (type) {
              case "callToAction":
                return CTA;
              case "customizationWindow":
                return CustomizationWindow;
              default:
                const NotFoundComponent = () => (
                  <h2>No component of type {type} found</h2>
                );

                return NotFoundComponent;
            }
          }}
        >
          <Slot name="body" />
        </Composition>
      </main>
    </>
  );
}

export async function getStaticProps() {
  const client = new CanvasClient({
    apiKey: process.env.UNIFORM_API_KEY,
    projectId: process.env.UNIFORM_PROJECT_ID,
  });

  const { composition } = await client.getCompositionBySlug({
    slug: "/",
  });

  return {
    props: {
      composition,
    },
  };
}
